/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author GChronos
 */
public class Respaldos extends javax.swing.JInternalFrame {

    /**
     * Creates new form Respaldos
     */
    public Respaldos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBackup = new javax.swing.JButton();
        jRestaurar = new javax.swing.JButton();

        jBackup.setText("Crear Backup");
        jBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBackupActionPerformed(evt);
            }
        });

        jRestaurar.setText("Restaurar Backup");
        jRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRestaurarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(69, 69, 69)
                .addComponent(jRestaurar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRestaurar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(174, 174, 174))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBackupActionPerformed
	
        Process p = null;
                        
        try {
            p = Runtime.getRuntime().exec("mysqldump -u root -proot mydb");
            InputStream is = p.getInputStream();//Pedimos la entrada
            FileOutputStream fos = null;
            fos = new FileOutputStream("backup_tren.sql"); //creamos el archivo para le respaldo
            int leido = 0;
            byte[] buffer = new byte[1000]; //Creamos una variable de tipo byte para el buffer
            leido = is.read(buffer); //Devuelve el número de bytes leídos o -1 si se alcanzó el final del stream.
            
            while (leido > 0) {            
                fos.write(buffer, 0, leido);//Buffer de caracteres, Desplazamiento de partida para empezar a escribir caracteres, Número de caracteres para escribir
                leido = is.read(buffer);                        
            }
            
            fos.close();//Cierra respaldo
            JOptionPane.showMessageDialog(null, "Backup Creado");
        } catch (IOException ex) {
            Logger.getLogger(Respaldos.class.getName()).log(Level.SEVERE, null, ex);
        }                        
    }//GEN-LAST:event_jBackupActionPerformed

    private void jRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRestaurarActionPerformed
        Process p = null;
        
        try {
            p = Runtime.getRuntime().exec("mysql -u root -proot mydb");
        } catch (IOException ex) {
            Logger.getLogger(Respaldos.class.getName()).log(Level.SEVERE, null, ex);
        }
 
        OutputStream os = p.getOutputStream(); //Pedimos la salida
        FileInputStream fis = null;
                try {
                    fis = new FileInputStream("backup_tren.sql"); //creamos el archivo para le respaldo
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Respaldos.class.getName()).log(Level.SEVERE, null, ex);
                }
        byte[] buffer = new byte[1000]; //Creamos una variable de tipo byte para el buffer

        int leido = 0;
                try {
                    leido = fis.read(buffer); //Devuelve el número de bytes leídos o -1 si se alcanzó el final del stream.
                } catch (IOException ex) {
                    Logger.getLogger(Respaldos.class.getName()).log(Level.SEVERE, null, ex);
                }
        while (leido > 0) {
                    try {
                        os.write(buffer, 0, leido); //Buffer de caracteres, Desplazamiento de partida para empezar a escribir caracteres, Número de caracteres para escribir
                    } catch (IOException ex) {
                        Logger.getLogger(Respaldos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        leido = fis.read(buffer);
                    } catch (IOException ex) {
                        Logger.getLogger(Respaldos.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        try {
            os.flush(); //vacía los buffers de salida
            os.close(); //Cierra
            fis.close(); //Cierra respaldo
            JOptionPane.showMessageDialog(null, "Base de Datos restaurada con exito");
        } catch (IOException ex) {
            Logger.getLogger(Respaldos.class.getName()).log(Level.SEVERE, null, ex);
        }
                                       
    }//GEN-LAST:event_jRestaurarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBackup;
    private javax.swing.JButton jRestaurar;
    // End of variables declaration//GEN-END:variables
}
